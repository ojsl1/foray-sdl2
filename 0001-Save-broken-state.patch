From 91934366173d8c1fc891a38554362053042a2299 Mon Sep 17 00:00:00 2001
From: ojsl1 <ojsl@protonmail.ch>
Date: Thu, 23 May 2024 14:55:15 +0300
Subject: [PATCH] Save broken state

---
 Makefile   |  14 ++++--
 README     |   4 ++
 addons.cpp |   4 +-
 main.cpp   | 100 ++++++++++++++++++++++++++++++++++--------
 render.cpp |  41 +++++++++++-------
 render.h   | 125 +++++++++++++++++++++++++++++++++++------------------
 6 files changed, 206 insertions(+), 82 deletions(-)

diff --git a/Makefile b/Makefile
index f85f3ae..f5a21f1 100644
--- a/Makefile
+++ b/Makefile
@@ -11,17 +11,23 @@ run: game leanclean
 	./game
 	rm -f game
 
-game: main.o render.o addons.o
-	$(CC) main.o render.o addons.o -o game $(LDFLAGS)
+game: main.o render.o button.o mouse.o addons.o
+	$(CC) main.o render.o button.o mouse.o addons.o -o game $(LDFLAGS)
 
 main.o: main.cpp main.h
 	$(CC) $(CXXFLAGS) main.cpp main.h $(shell pkg-config --cflags sdl2)
    
 render.o: render.cpp render.h
-	$(CC) $(CXXFLAGS) render.cpp $(shell pkg-config --cflags sdl2)
+	$(CC) $(CXXFLAGS) render.cpp render.h $(shell pkg-config --cflags sdl2)
+
+mouse.o: mouse.cpp mouse.h
+	$(CC) $(CXXFLAGS) mouse.cpp mouse.h $(shell pkg-config --cflags sdl2)
+
+button.o: button.cpp button.h
+	$(CC) $(CXXFLAGS) button.cpp button.h $(shell pkg-config --cflags sdl2)
 
 addons.o: addons.cpp addons.h
-	$(CC) $(CXXFLAGS) addons.cpp $(shell pkg-config --cflags sdl2)
+	$(CC) $(CXXFLAGS) addons.cpp addons.h $(shell pkg-config --cflags sdl2)
 
 clean: 
 	@echo "Cleaning everything..."
diff --git a/README b/README
index b3ed810..d68ed6d 100644
--- a/README
+++ b/README
@@ -1,6 +1,10 @@
 # Foray-SDL2
 
 TODO:
+- Mouse event
+
+- Clickable button
+
 1. Currently all header files that require SDL libs source them through `render.h` -> `main.h`. Delete this superfluous step and directly source the SDL libs through main.h. For the affected header files this will require adding includes for the standard libs that are also in render.h (as of now just iostream and vector).
 
 2. Separate classes from `render.h` to their own header files.
diff --git a/addons.cpp b/addons.cpp
index eb6fefe..1901ab1 100644
--- a/addons.cpp
+++ b/addons.cpp
@@ -1,8 +1,8 @@
-#include <iostream>
 #include "addons.h"
 
-#if 0
+//TODO
 
+#if 0
 void Addons::skeletonVoid(){
   std::cout << "Makefile Example\n";
 }
diff --git a/main.cpp b/main.cpp
index 8bb0e88..5691ac3 100644
--- a/main.cpp
+++ b/main.cpp
@@ -1,9 +1,12 @@
 #include "render.h"
-//#include "addons.h" //TODO
+#include "addons.h" //TODO
+#include "mouse.h" //TODO
+#include "button.h" //TODO
 
 SDL_Window *window;
 Mix_Chunk *bell;
 Mix_Music *bgm;
+double delta;
 
 void cap_framerate ( Uint32 starting_tick ){
     if ( ( 1000 / fps ) > SDL_GetTicks() - starting_tick ){
@@ -33,35 +36,94 @@ void prepClose ( SDL_Window* window, WindowDimensions dims ){
 
 int main( int argc, char *argv[] ){
     initVideo(); 
+    Layer UI;
+    Layer World;
+    EventReceiver ExampleButton;
+    UI.SubscribeToEvents(&ExampleButton);
+
+    // main loop
+    bool running = true;
+
+    double delta = .0001;
+    double time2 = SDL_GetTicks();
+   
+    SDL_Rect movable{100,50,200,132}; // x,y,w,h
+    float  xKB = movable.x;
 
     Uint32 starting_tick;
+    SDL_Event Event;
+    Mouse mouse;
 
-    SDL_Event event;
-    bool running = true;
     while ( running ){
+      delta = (SDL_GetTicks() - time2)/1000; //dividing with thousand to convert ms into s
+      time2 = SDL_GetTicks(); // reset time2 for the next loop
+
+      mouse.updateCursor();
+
       starting_tick = SDL_GetTicks();
       cap_framerate( starting_tick );
-      while ( SDL_PollEvent( &event ) != 0 ){
-          switch ( event.type ){
-              case SDL_QUIT:
-                  running = false;
+
+      // event loop
+      while ( SDL_PollEvent( &Event ) != 0 ){
+          switch ( Event.type ){
+            case SDL_QUIT:
+              running = false;
+              break;
+            case SDL_MOUSEBUTTONDOWN: // event loop
+              switch (Event.button.button){
+                case SDL_BUTTON_LEFT:
                   break;
-              case SDLK_ESCAPE:
+                case SDL_BUTTON_RIGHT:
+                  break;
+              }
+              break;
+            case SDL_MOUSEBUTTONUP: // event loop
+              switch (Event.button.button){
+                case SDL_BUTTON_LEFT:
+                  break;
+                case SDL_BUTTON_RIGHT:
+                  break;
+              }
+              break;
+            case SDL_KEYDOWN: // event loop
+              switch (Event.key.keysym.sym){
+                case SDLK_ESCAPE:
                   running = false;
                   break;
-              /*case SDL_MOUSEBUTTONDOWN:
-                  int x, y;
-                  SDL_GetMouseState( &x, &y );
-
-                  if ( isPointInRect( x, y, Button button1 ) ){
-                      std::cout << "Button clicked!" << std::endl;
-                  }
-                  break;*/
-              default:
+                case SDLK_UP:
+                  std::cout << "it works" << std::endl;
+                  break;
+                default:
                   break;
-          }
-      }
+                case SDLK_DOWN:
+                  std::cout << "it works" << std::endl;
+                  break;
+              }
+              break;
+            /*case SDL_MOUSEBUTTON: // event loop
+             int x, y;
+             SDL_GetMouseState( &x, &y );
+             std::cout << "Mouse is at " << x << "," << y;
+             if ( isPointInRect( x, y, Button button1 ) ){
+                 std::cout << "Buttno clicked!" << std::endl;
+             }*/
+             break;
+            default: // event loop
+              break;
+          } // end outer switch
+      } // end event loop
+
+    // Moving the SDL_Rect movable with keyboard
+    auto key = SDL_GetKeyboardState(0); // get states of every key on the keyboard
+    if (key[SDL_SCANCODE_A]){
+      xKB += -100 * delta; // velocity of movement
     }
+    if (key[SDL_SCANCODE_D]){
+      xKB +=  100 * delta; // velocity of movement
+    }
+    movable.x = xKB;
+
+    } // end main loop
 
     WindowDimensions dims = {640, 480, 1920, 0};
     prepClose( window, dims);
diff --git a/render.cpp b/render.cpp
index 6fa37bc..709b6ee 100644
--- a/render.cpp
+++ b/render.cpp
@@ -2,9 +2,9 @@
 
 void initVideo(){
     SDL_Init( SDL_INIT_EVERYTHING );
-
+    
+    // Create the window
     SDL_Window *window = NULL;
-
     window = SDL_CreateWindow( "イカは食用のいきものである",
                                 SDL_WINDOWPOS_UNDEFINED,
                                 SDL_WINDOWPOS_UNDEFINED,
@@ -14,37 +14,44 @@ void initVideo(){
                                 //SDL_WINDOW_FULLSCREEN_DESKTOP
                                 );
 
-    if ( window == NULL){
-      std::cout << "Error initializing the window! "
-        << std::endl
-        << SDL_GetError()
-        << std::endl;
-    }
-   
+    if ( window == NULL){ std::cout << SDL_GetError() << std::endl; }
+
     //Note: below disables SDL_WINDOW_FULLSCREEN_DESKTOP
     SDL_SetWindowBordered( window, SDL_TRUE );
 
-    //SDL_Surface *screen = SDL_GetWindowSurface( window );
-    
+    /*
+    // Create the renderer
+    SDL_Renderer *ren = NULL;
+    ren = SDL_CreateRenderer( window, -1, SDL_RENDERER_ACCELERATED );
+    */
+
+    // Create a surface for the window
     SDL_Surface *screen = NULL;
     screen = SDL_GetWindowSurface( window );
 
-    //unsigned int 32
+    // Create some unsigned int 32 colors
     Uint32 beige = SDL_MapRGB( screen->format, 255, 255, 115 );
     Uint32 pink   = SDL_MapRGB( screen->format, 232, 111, 148 );
     Uint32 blue  = SDL_MapRGB( screen->format, 0, 0, 255 );
     Uint32 darkblue  = SDL_MapRGB( screen->format, 111,114,120 );
     Uint32 darkgreen  = SDL_MapRGB( screen->format, 100,120,100 );
-    SDL_FillRect( screen, NULL, darkgreen );
 
+    ///////////////         START DRAWING           ///////////////
+
+
+    SDL_FillRect( screen, NULL, darkgreen ); //fill screen with one color
+
+    // Creating bare Sprites
     //Sprite object( red, window_width/2, window_height/2 );
     //Sprite another( blue, window_width/2-100, window_height/2+20 );
 
+    // Creating Block sprites
     Block block1( pink, 120, 30 );
     Block block2( pink, 100, 15 );
-    block1.set_image( "cosmox2.png" );
-    block2.set_image( "avatar.bmp" );
+    block1.set_image( "resources/cosmox2.png" );
+    block2.set_image( "resources/avatar.bmp" );
 
+    // Manipulate SpriteGroups
     SpriteGroup active_sprites;
     active_sprites.add( &block2 );
     active_sprites.add( &block1 );
@@ -55,8 +62,12 @@ void initVideo(){
 
     active_sprites.draw( screen );
 
+    // UPDATE IE. RENDER WINDOW SURFACE WITH SOFTWARE RENDERING
     SDL_UpdateWindowSurface( window );
 
+
+    ///////////////           SOUNDS            //////////////////
+
     // Init mixer
     // MIX_DEFAULT_FREQUENCY = 22050
     Mix_OpenAudio( MIX_DEFAULT_FREQUENCY, MIX_DEFAULT_FORMAT, 2, 4096 );
diff --git a/render.h b/render.h
index db17de2..c44b97b 100644
--- a/render.h
+++ b/render.h
@@ -10,43 +10,6 @@
 #define fps 1
 
 void initVideo();
-/*
-class Game{
-public:
-};
-
-class Sound{
-public:
-  Sound(  ){
-
-  }
-
-  ~Sound(){
-  Mix_FreeChunk(bell);
-  bell = NULL;
-  Mix_FreeMusic(bgm);
-  bgm = NULL;
-  }
-};
-
-class BlankRect{
-public:
-    //public members
-};
-
-class EventReceiver {
-public:
-    virtual bool HandleEvent(const SDL_Event* Event){
-        return false;
-    }
-};
-
-class Button{
-public:
-    //public stuff
-private:
-    //private stuff
-}; */
 
 class Sprite{
 protected:
@@ -98,6 +61,57 @@ public:
   }
 };
 
+class Layer{
+public:
+  bool HandleEvent(const SDL_Event* Event){
+    for (const auto Handler : Subscribers){
+      if (Handler->HandleEvent(Event)){
+        //notify all subscribers that the event was handled
+        return true;
+      }
+    }
+    return false;
+  }
+  
+  void SubscribeToEvents(EventReceiver* Receiver){
+    Subscribers.push_back(Receiver);
+  }
+
+private:
+  std::vector<EventReceiver*> Subscribers;
+};
+
+class EventReceiver{
+public:
+  virtual bool HandleEvent(const SDL_Event* Event){
+    std::cout << "its working\n" << std::endl;
+    //return true if event was handled, otherwise return false
+    return false;
+  }
+};
+
+class Mouse : public Sprite{
+protected:
+  SDL_Rect point;
+
+public: 
+  Mouse( Uint32 color, int x, int y, int w = 48, int h = 64 ) : Sprite( color, x, y, w, h ){
+    image = IMG_Load("resources/mouse.png");
+    rect.w  = 25;
+    rect.h  = 25;
+    point.w = 1; //point only for collision detectection
+    point.h = 1; //which is why its only 1x1
+    SDL_ShowCursor(false); //hide system cursor
+  }
+
+  void updateCursor(){
+      SDL_GetMouseState(&rect.x, &rect.y);
+      point.x = rect.x; // collision point topleft
+      point.y = rect.y; // "
+  }
+
+};
+
 class SpriteGroup{
 private:
     std::vector <Sprite*> spriteList;
@@ -192,12 +206,11 @@ public:
 };
 
 class Block : public Sprite{
-// inherit everything from Sprite to class Block,
-// no need for private as everything we care about is already inherited
 public:
-  //funnily this constructor will take the same arguments as original Sprite class
-      // call the constructor for the parent object/Sprite class itself,
-        // effectively mapping the parent object to Block
+    // inherit everything public from Sprite
+    //funnily this constructor will take the same arguments as original Sprite class
+    // call the constructor for the parent object/Sprite class itself,
+    // effectively mapping the parent object to Block
     Block( Uint32 color, int x, int y, int w = 48, int h = 64 )
     : Sprite( color, x, y, w, h ){
         update_properties();
@@ -251,4 +264,32 @@ public:
         }
     }
 };
+
+/*
+class Game{
+public:
+};
+
+class Sound{
+public:
+  Sound(  ){
+
+  }
+
+  ~Sound(){
+  Mix_FreeChunk(bell);
+  bell = NULL;
+  Mix_FreeMusic(bgm);
+  bgm = NULL;
+  }
+};
+
+class EventReceiver {
+public:
+    virtual bool HandleEvent(const SDL_Event* Event){
+        return false;
+    }
+};
+*/
+
 #endif // RENDER_H
-- 
2.45.1

